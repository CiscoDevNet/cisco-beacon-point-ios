//
//  Default.m
//  Mist
//
//  Created by Mist on 7/8/15.
//  Copyright (c) 2015 Mist. All rights reserved.
//

#import "Default.h"
#import "UIColor+Mist.h"
#import "MistManager.h"
#import "SampleApp-Swift.h"

@interface Default ()

@end

@implementation Default

#define kSettings @"settings"

+(void)updateSettings:(NSDictionary *)settings withCompletion:(void(^)(void))callback{
    NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];
    [ud setObject:settings forKey:kSettings];
    [ud synchronize];
    
    localSettings = [[NSMutableDictionary alloc] initWithDictionary:settings];
    
    if (callback) {
        callback();
    }
}

+(NSMutableDictionary *)currentSettings{
    if (!localSettings) {
        localSettings = [[NSUserDefaults standardUserDefaults] objectForKey:kSettings];
    }
    
    return localSettings;
}

+(void)appDefault{
//    NSString *path = [[NSBundle mainBundle] bundlePath];
//    NSString *pListPath = [path stringByAppendingPathComponent:@"Settings.bundle/MotionSetting.plist"];
//    NSDictionary *pList = [NSDictionary dictionaryWithContentsOfFile:pListPath];
//    NSLog(@"pList = %@",pList);
    
    NSMutableDictionary *appSettings;
    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];
    NSString *uuid = [self getUUIDString];
    

    
    bool hasChanged = false;
    
    appSettings = [[NSMutableDictionary alloc] init];
    
    // initial load: set default settings
    if (![userDefault objectForKey:@"firstTime"]) {
        [appSettings setObject:@false forKey:kMonitor];
        [appSettings setObject:@false forKey:kRange];
        [appSettings setObject:@false forKey:kLocation];
        [appSettings setObject:@true forKey:kEnableNotification];

        
        // When the app is first started for the first time, a UUID will be generated by MistSDK and saved to UserDefault.
        // This UUID will be the identity for the device will be the same for all orgs.
        // Caveat:
        // When the advertisement is reset, this UUID will not be changed.
        // When the user reinstall the app, this UUID will be renewed.
        [appSettings setObject:uuid forKey:kDeviceID];
        
        
        
        [userDefault setObject:appSettings forKey:kSettings];
        [userDefault setObject:@true forKey:@"firstTime"];
 
        hasChanged = true;
        
        [OrgsManager deleteAllOrgs];
    }
    
    if (hasChanged) {
        [userDefault synchronize];
    }
}

+(void)shouldPurgeAllOrgs{
    static NSString *oldResetKey = @"clearPreviousUUID";
    static NSString *newResetKey = @"deleteOrgs";
    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];
    // Clear all previous orgs.
    if (![userDefault objectForKey:newResetKey]) {
        [OrgsManager deleteAllOrgs];
        [userDefault setObject:@true forKey:newResetKey];

        [userDefault removeObjectForKey:oldResetKey]; // clean up other delete org keys
        [userDefault synchronize];
        
        localSettings = [[NSMutableDictionary alloc] init];
    }
}

+(bool)isOlderVersion{
    NSString *currentVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleShortVersionString"];
    NSArray *versionComponents = [currentVersion componentsSeparatedByString:@"."];
    if ([versionComponents[0] integerValue] < 2) {
//        return true;
        if ([versionComponents[1] integerValue] < 6) {
//            return true;
            if ([versionComponents[2] integerValue] < 15) {
                return true;
            }
        }
    }
    return false;
}

+(NSString *)defaultFontName{
    return @"SourceSansPro-Regular";
}

+(NSString *)newDefaultFontName{
    return @"OpenSans-Regular";
}

+(UIColor*)defaultColor{    
    return [UIColor colorWithHexString:@"#50b4c8"];
}

+ (UIColor*)defaultSystemTintColor{
    static UIColor* systemTintColor = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        UIView* view = [[UIView alloc] init];
        systemTintColor = view.tintColor;
    });
    return systemTintColor;
}

+(float)OSVersion{
    return [[[UIDevice currentDevice] systemVersion] floatValue];
}

+(CGFloat)degreesToRadians:(CGFloat)degrees{
    return degrees * M_PI / 180;
}

+(CGFloat)radiansToDegrees:(CGFloat)radians{
    return radians * 180 / M_PI;
}

+(void)performBlockOnMainThread:(void(^)(void))callback{
    if(![NSThread isMainThread]){
        dispatch_async(dispatch_get_main_queue(), callback);
    } else {
        callback();
    }
}

#pragma mark - new UI Specs

+(UIColor *)newBackgroundColor{
    return [UIColor colorWithHexString:@"#282828"];
}

+(UIColor *)cellTextColor{
    return [UIColor colorWithHexString:@"#AFAFAF"];
}

+(UIColor *)newBlueBackgroundColor{
    return [UIColor colorWithHexString:@"#0087CC"];
}

+ (CAGradientLayer*) showFloorBackground {
    // Create colors
    UIColor *darkOp = [UIColor colorWithHexString:@"#3023AE"];
    UIColor *lightOp = [UIColor colorWithHexString:@"#C86DD7"];
    
    // Create gradient
    CAGradientLayer *gradient = [CAGradientLayer layer];
    
    // Set colors
    gradient.colors = [NSArray arrayWithObjects:
                       (id)lightOp.CGColor,
                       (id)darkOp.CGColor,
                       nil];
    
    // Shadow
    gradient.shadowOffset = CGSizeMake(3.0f, 3.0f);
    gradient.shadowColor = [UIColor blackColor].CGColor;
    gradient.shadowOpacity = 0.6;
    gradient.shadowRadius = 10;
    
    // Other options
    gradient.borderWidth = 0.5f;
    gradient.borderColor = [UIColor colorWithRed:0.0f green:0.0f blue:0.0f alpha:1.0].CGColor;
    gradient.cornerRadius = 10;
    
    return gradient;
}

+(NSString *)newFont{
    return @"HelveticaNeue-Thin";
}

/* Function to get the url  from the VBeacon */
+(NSString*)getStringFromBeacons:(NSString*)beaconString{
    NSCharacterSet *delimiters = [NSCharacterSet characterSetWithCharactersInString:@"()"];
    NSArray *splitString = [beaconString componentsSeparatedByCharactersInSet:delimiters];
    NSString *substring;
    if ([splitString count]>0)
    {
        substring = [splitString objectAtIndex:1];
    }
    return substring;
}


+(NSString *)getUUIDString{
    return [[[MistManager getMistUUID] UUIDString] lowercaseString];
}

+(bool)useCustomTheme{
    return true;
}

+(bool)isEmptyString:(NSString *)str{
    if (str == nil) {
        return true;
    }
    return [str isEqualToString:@""];
}

@end
